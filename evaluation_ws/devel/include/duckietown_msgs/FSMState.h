// Generated by gencpp from file duckietown_msgs/FSMState.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_FSMSTATE_H
#define DUCKIETOWN_MSGS_MESSAGE_FSMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct FSMState_
{
  typedef FSMState_<ContainerAllocator> Type;

  FSMState_()
    : header()
    , state()  {
    }
  FSMState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LANE_FOLLOWING)
  #undef LANE_FOLLOWING
#endif
#if defined(_WIN32) && defined(INTERSECTION_COORDINATION)
  #undef INTERSECTION_COORDINATION
#endif
#if defined(_WIN32) && defined(INTERSECTION_CONTROL)
  #undef INTERSECTION_CONTROL
#endif
#if defined(_WIN32) && defined(NORMAL_JOYSTICK_CONTROL)
  #undef NORMAL_JOYSTICK_CONTROL
#endif
#if defined(_WIN32) && defined(SAFE_JOYSTICK_CONTROL)
  #undef SAFE_JOYSTICK_CONTROL
#endif
#if defined(_WIN32) && defined(PARKING)
  #undef PARKING
#endif
#if defined(_WIN32) && defined(ARRIVE_AT_STOP_LINE)
  #undef ARRIVE_AT_STOP_LINE
#endif
#if defined(_WIN32) && defined(LANE_RECOVERY)
  #undef LANE_RECOVERY
#endif
#if defined(_WIN32) && defined(INTERSECTION_RECOVERY)
  #undef INTERSECTION_RECOVERY
#endif
#if defined(_WIN32) && defined(CALIBRATING)
  #undef CALIBRATING
#endif
#if defined(_WIN32) && defined(CALIBRATING_CALC)
  #undef CALIBRATING_CALC
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LANE_FOLLOWING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> INTERSECTION_COORDINATION;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> INTERSECTION_CONTROL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> NORMAL_JOYSTICK_CONTROL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SAFE_JOYSTICK_CONTROL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PARKING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ARRIVE_AT_STOP_LINE;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LANE_RECOVERY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> INTERSECTION_RECOVERY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> CALIBRATING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> CALIBRATING_CALC;

  typedef boost::shared_ptr< ::duckietown_msgs::FSMState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::FSMState_<ContainerAllocator> const> ConstPtr;

}; // struct FSMState_

typedef ::duckietown_msgs::FSMState_<std::allocator<void> > FSMState;

typedef boost::shared_ptr< ::duckietown_msgs::FSMState > FSMStatePtr;
typedef boost::shared_ptr< ::duckietown_msgs::FSMState const> FSMStateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::LANE_FOLLOWING =
        
          "\"LANE_FOLLOWING\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::INTERSECTION_COORDINATION =
        
          "\"INTERSECTION_COORDINATION\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::INTERSECTION_CONTROL =
        
          "\"INTERSECTION_CONTROL\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::NORMAL_JOYSTICK_CONTROL =
        
          "\"NORMAL_JOYSTICK_CONTROL\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::SAFE_JOYSTICK_CONTROL =
        
          "\"SAFE_JOYSTICK_CONTROL\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::PARKING =
        
          "\"PARKING\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::ARRIVE_AT_STOP_LINE =
        
          "\"ARRIVE_AT_STOP_LINE\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::LANE_RECOVERY =
        
          "\"LANE_RECOVERY\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::INTERSECTION_RECOVERY =
        
          "\"INTERSECTION_RECOVERY\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::CALIBRATING =
        
          "\"CALIBRATING\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      FSMState_<ContainerAllocator>::CALIBRATING_CALC =
        
          "\"CALIBRATING_CALC\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::FSMState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::FSMState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::FSMState_<ContainerAllocator1> & lhs, const ::duckietown_msgs::FSMState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::FSMState_<ContainerAllocator1> & lhs, const ::duckietown_msgs::FSMState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::FSMState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::FSMState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::FSMState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::FSMState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::FSMState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::FSMState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::FSMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c94938238cecfe40fdf747aae8abbaa";
  }

  static const char* value(const ::duckietown_msgs::FSMState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c94938238cecfe4ULL;
  static const uint64_t static_value2 = 0x0fdf747aae8abbaaULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::FSMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/FSMState";
  }

  static const char* value(const ::duckietown_msgs::FSMState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::FSMState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string state\n"
"\n"
"# pseudo constants\n"
"string LANE_FOLLOWING=\"LANE_FOLLOWING\"\n"
"string INTERSECTION_COORDINATION=\"INTERSECTION_COORDINATION\"\n"
"string INTERSECTION_CONTROL=\"INTERSECTION_CONTROL\"\n"
"string NORMAL_JOYSTICK_CONTROL=\"NORMAL_JOYSTICK_CONTROL\"\n"
"string SAFE_JOYSTICK_CONTROL=\"SAFE_JOYSTICK_CONTROL\"\n"
"string PARKING=\"PARKING\"\n"
"string ARRIVE_AT_STOP_LINE=\"ARRIVE_AT_STOP_LINE\"\n"
"string LANE_RECOVERY=\"LANE_RECOVERY\"\n"
"string INTERSECTION_RECOVERY=\"INTERSECTION_RECOVERY\"\n"
"string CALIBRATING=\"CALIBRATING\"\n"
"string CALIBRATING_CALC=\"CALIBRATING_CALC\"\n"
"\n"
"#List of states\n"
"# LANE_FOLLOWING\n"
"# INTERSECTION_COORDINATION\n"
"# INTERSECTION_CONTROL\n"
"# NORMAL_JOYSTICK_CONTROL\n"
"# SAFE_JOYSTICK_CONTROL\n"
"# PARKING\n"
"# ARRIVE_AT_STOP_LINE\n"
"# LANE_RECOVERY\n"
"# INTERSECTION_RECOVERY\n"
"# CALIBRATING\n"
"# CALIBRATING_CALC\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::duckietown_msgs::FSMState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::FSMState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FSMState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::FSMState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::FSMState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_FSMSTATE_H
