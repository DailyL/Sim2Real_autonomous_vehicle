// Generated by gencpp from file duckietown_msgs/DiagnosticsRosTopic.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSTOPIC_H
#define DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSTOPIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duckietown_msgs
{
template <class ContainerAllocator>
struct DiagnosticsRosTopic_
{
  typedef DiagnosticsRosTopic_<ContainerAllocator> Type;

  DiagnosticsRosTopic_()
    : node()
    , name()
    , help()
    , type(0)
    , direction(0)
    , frequency(0.0)
    , effective_frequency(0.0)
    , healthy_frequency(0.0)
    , bandwidth(0.0)
    , enabled(false)  {
    }
  DiagnosticsRosTopic_(const ContainerAllocator& _alloc)
    : node(_alloc)
    , name(_alloc)
    , help(_alloc)
    , type(0)
    , direction(0)
    , frequency(0.0)
    , effective_frequency(0.0)
    , healthy_frequency(0.0)
    , bandwidth(0.0)
    , enabled(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _node_type;
  _node_type node;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _help_type;
  _help_type help;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _direction_type;
  _direction_type direction;

   typedef float _frequency_type;
  _frequency_type frequency;

   typedef float _effective_frequency_type;
  _effective_frequency_type effective_frequency;

   typedef float _healthy_frequency_type;
  _healthy_frequency_type healthy_frequency;

   typedef float _bandwidth_type;
  _bandwidth_type bandwidth;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TOPIC_DIRECTION_INBOUND)
  #undef TOPIC_DIRECTION_INBOUND
#endif
#if defined(_WIN32) && defined(TOPIC_DIRECTION_OUTBOUND)
  #undef TOPIC_DIRECTION_OUTBOUND
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_GENERIC)
  #undef TOPIC_TYPE_GENERIC
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_DRIVER)
  #undef TOPIC_TYPE_DRIVER
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_PERCEPTION)
  #undef TOPIC_TYPE_PERCEPTION
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_CONTROL)
  #undef TOPIC_TYPE_CONTROL
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_PLANNING)
  #undef TOPIC_TYPE_PLANNING
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_LOCALIZATION)
  #undef TOPIC_TYPE_LOCALIZATION
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_MAPPING)
  #undef TOPIC_TYPE_MAPPING
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_SWARM)
  #undef TOPIC_TYPE_SWARM
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_BEHAVIOR)
  #undef TOPIC_TYPE_BEHAVIOR
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_VISUALIZATION)
  #undef TOPIC_TYPE_VISUALIZATION
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_INFRASTRUCTURE)
  #undef TOPIC_TYPE_INFRASTRUCTURE
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_COMMUNICATION)
  #undef TOPIC_TYPE_COMMUNICATION
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_DIAGNOSTICS)
  #undef TOPIC_TYPE_DIAGNOSTICS
#endif
#if defined(_WIN32) && defined(TOPIC_TYPE_DEBUG)
  #undef TOPIC_TYPE_DEBUG
#endif

  enum {
    TOPIC_DIRECTION_INBOUND = 0u,
    TOPIC_DIRECTION_OUTBOUND = 1u,
    TOPIC_TYPE_GENERIC = 0u,
    TOPIC_TYPE_DRIVER = 1u,
    TOPIC_TYPE_PERCEPTION = 2u,
    TOPIC_TYPE_CONTROL = 3u,
    TOPIC_TYPE_PLANNING = 4u,
    TOPIC_TYPE_LOCALIZATION = 5u,
    TOPIC_TYPE_MAPPING = 6u,
    TOPIC_TYPE_SWARM = 7u,
    TOPIC_TYPE_BEHAVIOR = 8u,
    TOPIC_TYPE_VISUALIZATION = 9u,
    TOPIC_TYPE_INFRASTRUCTURE = 10u,
    TOPIC_TYPE_COMMUNICATION = 11u,
    TOPIC_TYPE_DIAGNOSTICS = 12u,
    TOPIC_TYPE_DEBUG = 20u,
  };


  typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> const> ConstPtr;

}; // struct DiagnosticsRosTopic_

typedef ::duckietown_msgs::DiagnosticsRosTopic_<std::allocator<void> > DiagnosticsRosTopic;

typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosTopic > DiagnosticsRosTopicPtr;
typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosTopic const> DiagnosticsRosTopicConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator2> & rhs)
{
  return lhs.node == rhs.node &&
    lhs.name == rhs.name &&
    lhs.help == rhs.help &&
    lhs.type == rhs.type &&
    lhs.direction == rhs.direction &&
    lhs.frequency == rhs.frequency &&
    lhs.effective_frequency == rhs.effective_frequency &&
    lhs.healthy_frequency == rhs.healthy_frequency &&
    lhs.bandwidth == rhs.bandwidth &&
    lhs.enabled == rhs.enabled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3a6c5501489fa1a1f348c31cffc641a";
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3a6c5501489fa1aULL;
  static const uint64_t static_value2 = 0x1f348c31cffc641aULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/DiagnosticsRosTopic";
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Topic direction (this has to match duckietown.TopicDirection)\n"
"uint8 TOPIC_DIRECTION_INBOUND = 0\n"
"uint8 TOPIC_DIRECTION_OUTBOUND = 1\n"
"\n"
"# Topic type (this has to match duckietown.TopicType)\n"
"uint8 TOPIC_TYPE_GENERIC = 0\n"
"uint8 TOPIC_TYPE_DRIVER = 1\n"
"uint8 TOPIC_TYPE_PERCEPTION = 2\n"
"uint8 TOPIC_TYPE_CONTROL = 3\n"
"uint8 TOPIC_TYPE_PLANNING = 4\n"
"uint8 TOPIC_TYPE_LOCALIZATION = 5\n"
"uint8 TOPIC_TYPE_MAPPING = 6\n"
"uint8 TOPIC_TYPE_SWARM = 7\n"
"uint8 TOPIC_TYPE_BEHAVIOR = 8\n"
"uint8 TOPIC_TYPE_VISUALIZATION = 9\n"
"uint8 TOPIC_TYPE_INFRASTRUCTURE = 10\n"
"uint8 TOPIC_TYPE_COMMUNICATION = 11\n"
"uint8 TOPIC_TYPE_DIAGNOSTICS = 12\n"
"uint8 TOPIC_TYPE_DEBUG = 20\n"
"\n"
"string node                     # Node publishing this message\n"
"string name                     # Topic object of the diagnostics\n"
"string help                     # Topic description\n"
"uint8 type                      # Topic type\n"
"uint8 direction                 # Topic direction\n"
"float32 frequency               # Topic frequency (Hz)\n"
"float32 effective_frequency     # Topic (effective) frequency (Hz)\n"
"float32 healthy_frequency       # Frequency at which this topic can be considered healthy\n"
"float32 bandwidth               # Topic bandwidth (byte/s)\n"
"bool enabled                    # Topic switch\n"
;
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node);
      stream.next(m.name);
      stream.next(m.help);
      stream.next(m.type);
      stream.next(m.direction);
      stream.next(m.frequency);
      stream.next(m.effective_frequency);
      stream.next(m.healthy_frequency);
      stream.next(m.bandwidth);
      stream.next(m.enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiagnosticsRosTopic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::DiagnosticsRosTopic_<ContainerAllocator>& v)
  {
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "help: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.help);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction);
    s << indent << "frequency: ";
    Printer<float>::stream(s, indent + "  ", v.frequency);
    s << indent << "effective_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.effective_frequency);
    s << indent << "healthy_frequency: ";
    Printer<float>::stream(s, indent + "  ", v.healthy_frequency);
    s << indent << "bandwidth: ";
    Printer<float>::stream(s, indent + "  ", v.bandwidth);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSTOPIC_H
