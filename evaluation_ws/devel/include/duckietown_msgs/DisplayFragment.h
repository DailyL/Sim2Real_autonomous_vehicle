// Generated by gencpp from file duckietown_msgs/DisplayFragment.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_DISPLAYFRAGMENT_H
#define DUCKIETOWN_MSGS_MESSAGE_DISPLAYFRAGMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/RegionOfInterest.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct DisplayFragment_
{
  typedef DisplayFragment_<ContainerAllocator> Type;

  DisplayFragment_()
    : header()
    , id()
    , region(0)
    , page(0)
    , data()
    , location()
    , z(0)
    , ttl(0)  {
    }
  DisplayFragment_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , region(0)
    , page(0)
    , data(_alloc)
    , location(_alloc)
    , z(0)
    , ttl(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef uint8_t _region_type;
  _region_type region;

   typedef uint8_t _page_type;
  _page_type page;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _data_type;
  _data_type data;

   typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef uint8_t _z_type;
  _z_type z;

   typedef int8_t _ttl_type;
  _ttl_type ttl;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(REGION_FULL)
  #undef REGION_FULL
#endif
#if defined(_WIN32) && defined(REGION_HEADER)
  #undef REGION_HEADER
#endif
#if defined(_WIN32) && defined(REGION_BODY)
  #undef REGION_BODY
#endif
#if defined(_WIN32) && defined(REGION_FOOTER)
  #undef REGION_FOOTER
#endif
#if defined(_WIN32) && defined(PAGE_ALL)
  #undef PAGE_ALL
#endif

  enum {
    REGION_FULL = 0u,
    REGION_HEADER = 1u,
    REGION_BODY = 2u,
    REGION_FOOTER = 3u,
    PAGE_ALL = 255u,
  };


  typedef boost::shared_ptr< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> const> ConstPtr;

}; // struct DisplayFragment_

typedef ::duckietown_msgs::DisplayFragment_<std::allocator<void> > DisplayFragment;

typedef boost::shared_ptr< ::duckietown_msgs::DisplayFragment > DisplayFragmentPtr;
typedef boost::shared_ptr< ::duckietown_msgs::DisplayFragment const> DisplayFragmentConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::DisplayFragment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::DisplayFragment_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DisplayFragment_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.region == rhs.region &&
    lhs.page == rhs.page &&
    lhs.data == rhs.data &&
    lhs.location == rhs.location &&
    lhs.z == rhs.z &&
    lhs.ttl == rhs.ttl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::DisplayFragment_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DisplayFragment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b47577c93ca4c0ee8514639ef90c78dc";
  }

  static const char* value(const ::duckietown_msgs::DisplayFragment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb47577c93ca4c0eeULL;
  static const uint64_t static_value2 = 0x8514639ef90c78dcULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/DisplayFragment";
  }

  static const char* value(const ::duckietown_msgs::DisplayFragment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Enum: region\n"
"uint8 REGION_FULL=0\n"
"uint8 REGION_HEADER=1\n"
"uint8 REGION_BODY=2\n"
"uint8 REGION_FOOTER=3\n"
"\n"
"# Enum: page\n"
"uint8 PAGE_ALL=255\n"
"\n"
"# fragment ID and destination page and region\n"
"string id\n"
"uint8 region\n"
"uint8 page\n"
"\n"
"# fragment content\n"
"sensor_msgs/Image data\n"
"\n"
"# location on the display where to show the fragment\n"
"sensor_msgs/RegionOfInterest location\n"
"\n"
"# Z index in the Z-buffer of the segment\n"
"uint8 z\n"
"\n"
"# Time-to-Live in seconds of the fragment (-1 for infinite, do not abuse)\n"
"int8 ttl\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
;
  }

  static const char* value(const ::duckietown_msgs::DisplayFragment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.region);
      stream.next(m.page);
      stream.next(m.data);
      stream.next(m.location);
      stream.next(m.z);
      stream.next(m.ttl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DisplayFragment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::DisplayFragment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::DisplayFragment_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "region: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.region);
    s << indent << "page: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.page);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z);
    s << indent << "ttl: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ttl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_DISPLAYFRAGMENT_H
