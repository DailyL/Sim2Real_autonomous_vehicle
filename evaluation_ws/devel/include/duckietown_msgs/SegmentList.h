// Generated by gencpp from file duckietown_msgs/SegmentList.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_SEGMENTLIST_H
#define DUCKIETOWN_MSGS_MESSAGE_SEGMENTLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <duckietown_msgs/Segment.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct SegmentList_
{
  typedef SegmentList_<ContainerAllocator> Type;

  SegmentList_()
    : header()
    , segments()  {
    }
  SegmentList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , segments(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::duckietown_msgs::Segment_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::duckietown_msgs::Segment_<ContainerAllocator> >> _segments_type;
  _segments_type segments;





  typedef boost::shared_ptr< ::duckietown_msgs::SegmentList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::SegmentList_<ContainerAllocator> const> ConstPtr;

}; // struct SegmentList_

typedef ::duckietown_msgs::SegmentList_<std::allocator<void> > SegmentList;

typedef boost::shared_ptr< ::duckietown_msgs::SegmentList > SegmentListPtr;
typedef boost::shared_ptr< ::duckietown_msgs::SegmentList const> SegmentListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::SegmentList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::SegmentList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::SegmentList_<ContainerAllocator1> & lhs, const ::duckietown_msgs::SegmentList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.segments == rhs.segments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::SegmentList_<ContainerAllocator1> & lhs, const ::duckietown_msgs::SegmentList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::SegmentList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::SegmentList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::SegmentList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::SegmentList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::SegmentList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::SegmentList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::SegmentList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cefc32a4bc9039bf09d40c6c13beace";
  }

  static const char* value(const ::duckietown_msgs::SegmentList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cefc32a4bc9039bULL;
  static const uint64_t static_value2 = 0xf09d40c6c13beaceULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::SegmentList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/SegmentList";
  }

  static const char* value(const ::duckietown_msgs::SegmentList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::SegmentList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"duckietown_msgs/Segment[] segments\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: duckietown_msgs/Segment\n"
"uint8 WHITE=0\n"
"uint8 YELLOW=1	\n"
"uint8 RED=2\n"
"uint8 color\n"
"duckietown_msgs/Vector2D[2] pixels_normalized\n"
"duckietown_msgs/Vector2D normal\n"
"\n"
"geometry_msgs/Point[2] points\n"
"\n"
"================================================================================\n"
"MSG: duckietown_msgs/Vector2D\n"
"float32 x\n"
"float32 y\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::duckietown_msgs::SegmentList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::SegmentList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.segments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SegmentList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::SegmentList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::SegmentList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "segments[]" << std::endl;
    for (size_t i = 0; i < v.segments.size(); ++i)
    {
      s << indent << "  segments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::duckietown_msgs::Segment_<ContainerAllocator> >::stream(s, indent + "    ", v.segments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_SEGMENTLIST_H
