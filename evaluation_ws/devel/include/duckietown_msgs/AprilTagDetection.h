// Generated by gencpp from file duckietown_msgs/AprilTagDetection.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_APRILTAGDETECTION_H
#define DUCKIETOWN_MSGS_MESSAGE_APRILTAGDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct AprilTagDetection_
{
  typedef AprilTagDetection_<ContainerAllocator> Type;

  AprilTagDetection_()
    : transform()
    , tag_id(0)
    , tag_family()
    , hamming(0)
    , decision_margin(0.0)
    , homography()
    , center()
    , corners()
    , pose_error(0.0)  {
      homography.assign(0.0);

      center.assign(0.0);

      corners.assign(0.0);
  }
  AprilTagDetection_(const ContainerAllocator& _alloc)
    : transform(_alloc)
    , tag_id(0)
    , tag_family(_alloc)
    , hamming(0)
    , decision_margin(0.0)
    , homography()
    , center()
    , corners()
    , pose_error(0.0)  {
  (void)_alloc;
      homography.assign(0.0);

      center.assign(0.0);

      corners.assign(0.0);
  }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef int32_t _tag_id_type;
  _tag_id_type tag_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tag_family_type;
  _tag_family_type tag_family;

   typedef int32_t _hamming_type;
  _hamming_type hamming;

   typedef float _decision_margin_type;
  _decision_margin_type decision_margin;

   typedef boost::array<float, 9>  _homography_type;
  _homography_type homography;

   typedef boost::array<float, 2>  _center_type;
  _center_type center;

   typedef boost::array<float, 8>  _corners_type;
  _corners_type corners;

   typedef float _pose_error_type;
  _pose_error_type pose_error;





  typedef boost::shared_ptr< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> const> ConstPtr;

}; // struct AprilTagDetection_

typedef ::duckietown_msgs::AprilTagDetection_<std::allocator<void> > AprilTagDetection;

typedef boost::shared_ptr< ::duckietown_msgs::AprilTagDetection > AprilTagDetectionPtr;
typedef boost::shared_ptr< ::duckietown_msgs::AprilTagDetection const> AprilTagDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator1> & lhs, const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator2> & rhs)
{
  return lhs.transform == rhs.transform &&
    lhs.tag_id == rhs.tag_id &&
    lhs.tag_family == rhs.tag_family &&
    lhs.hamming == rhs.hamming &&
    lhs.decision_margin == rhs.decision_margin &&
    lhs.homography == rhs.homography &&
    lhs.center == rhs.center &&
    lhs.corners == rhs.corners &&
    lhs.pose_error == rhs.pose_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator1> & lhs, const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a831190390fbef881c141df7b86598db";
  }

  static const char* value(const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa831190390fbef88ULL;
  static const uint64_t static_value2 = 0x1c141df7b86598dbULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/AprilTagDetection";
  }

  static const char* value(const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Transform transform\n"
"int32 tag_id\n"
"string tag_family\n"
"int32 hamming\n"
"float32 decision_margin\n"
"float32[9] homography\n"
"float32[2] center\n"
"float32[8] corners\n"
"float32 pose_error\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transform);
      stream.next(m.tag_id);
      stream.next(m.tag_family);
      stream.next(m.hamming);
      stream.next(m.decision_margin);
      stream.next(m.homography);
      stream.next(m.center);
      stream.next(m.corners);
      stream.next(m.pose_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AprilTagDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::AprilTagDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::AprilTagDetection_<ContainerAllocator>& v)
  {
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "tag_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tag_id);
    s << indent << "tag_family: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tag_family);
    s << indent << "hamming: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hamming);
    s << indent << "decision_margin: ";
    Printer<float>::stream(s, indent + "  ", v.decision_margin);
    s << indent << "homography[]" << std::endl;
    for (size_t i = 0; i < v.homography.size(); ++i)
    {
      s << indent << "  homography[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.homography[i]);
    }
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center[i]);
    }
    s << indent << "corners[]" << std::endl;
    for (size_t i = 0; i < v.corners.size(); ++i)
    {
      s << indent << "  corners[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.corners[i]);
    }
    s << indent << "pose_error: ";
    Printer<float>::stream(s, indent + "  ", v.pose_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_APRILTAGDETECTION_H
