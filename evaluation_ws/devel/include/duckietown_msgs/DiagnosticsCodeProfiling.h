// Generated by gencpp from file duckietown_msgs/DiagnosticsCodeProfiling.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSCODEPROFILING_H
#define DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSCODEPROFILING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duckietown_msgs
{
template <class ContainerAllocator>
struct DiagnosticsCodeProfiling_
{
  typedef DiagnosticsCodeProfiling_<ContainerAllocator> Type;

  DiagnosticsCodeProfiling_()
    : node()
    , block()
    , frequency(0.0)
    , duration(0.0)
    , filename()
    , line_nums()
    , time_since_last_execution(0.0)  {
      line_nums.assign(0);
  }
  DiagnosticsCodeProfiling_(const ContainerAllocator& _alloc)
    : node(_alloc)
    , block(_alloc)
    , frequency(0.0)
    , duration(0.0)
    , filename(_alloc)
    , line_nums()
    , time_since_last_execution(0.0)  {
  (void)_alloc;
      line_nums.assign(0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _node_type;
  _node_type node;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _block_type;
  _block_type block;

   typedef float _frequency_type;
  _frequency_type frequency;

   typedef float _duration_type;
  _duration_type duration;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _filename_type;
  _filename_type filename;

   typedef boost::array<uint16_t, 2>  _line_nums_type;
  _line_nums_type line_nums;

   typedef float _time_since_last_execution_type;
  _time_since_last_execution_type time_since_last_execution;





  typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> const> ConstPtr;

}; // struct DiagnosticsCodeProfiling_

typedef ::duckietown_msgs::DiagnosticsCodeProfiling_<std::allocator<void> > DiagnosticsCodeProfiling;

typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsCodeProfiling > DiagnosticsCodeProfilingPtr;
typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsCodeProfiling const> DiagnosticsCodeProfilingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator2> & rhs)
{
  return lhs.node == rhs.node &&
    lhs.block == rhs.block &&
    lhs.frequency == rhs.frequency &&
    lhs.duration == rhs.duration &&
    lhs.filename == rhs.filename &&
    lhs.line_nums == rhs.line_nums &&
    lhs.time_since_last_execution == rhs.time_since_last_execution;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f919bc6b39855368e96c3df59f3187f";
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f919bc6b3985536ULL;
  static const uint64_t static_value2 = 0x8e96c3df59f3187fULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/DiagnosticsCodeProfiling";
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string node                             # Node publishing this message\n"
"string block                            # Name of the profiled code block\n"
"float32 frequency                       # Execution frequency of the block\n"
"float32 duration                        # Last execution time of the block (in seconds)\n"
"string filename                         # Filename in which this block resides\n"
"uint16[2] line_nums                     # Start and end line of the block in the file\n"
"float32 time_since_last_execution       # Seconds since last execution\n"
;
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node);
      stream.next(m.block);
      stream.next(m.frequency);
      stream.next(m.duration);
      stream.next(m.filename);
      stream.next(m.line_nums);
      stream.next(m.time_since_last_execution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiagnosticsCodeProfiling_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::DiagnosticsCodeProfiling_<ContainerAllocator>& v)
  {
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node);
    s << indent << "block: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.block);
    s << indent << "frequency: ";
    Printer<float>::stream(s, indent + "  ", v.frequency);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.filename);
    s << indent << "line_nums[]" << std::endl;
    for (size_t i = 0; i < v.line_nums.size(); ++i)
    {
      s << indent << "  line_nums[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.line_nums[i]);
    }
    s << indent << "time_since_last_execution: ";
    Printer<float>::stream(s, indent + "  ", v.time_since_last_execution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSCODEPROFILING_H
