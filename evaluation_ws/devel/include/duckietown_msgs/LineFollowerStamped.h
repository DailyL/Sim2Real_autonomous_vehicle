// Generated by gencpp from file duckietown_msgs/LineFollowerStamped.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_LINEFOLLOWERSTAMPED_H
#define DUCKIETOWN_MSGS_MESSAGE_LINEFOLLOWERSTAMPED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct LineFollowerStamped_
{
  typedef LineFollowerStamped_<ContainerAllocator> Type;

  LineFollowerStamped_()
    : header()
    , valid(false)
    , outer_right(0.0)
    , inner_right(0.0)
    , inner_left(0.0)
    , outer_left(0.0)  {
    }
  LineFollowerStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , valid(false)
    , outer_right(0.0)
    , inner_right(0.0)
    , inner_left(0.0)
    , outer_left(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef float _outer_right_type;
  _outer_right_type outer_right;

   typedef float _inner_right_type;
  _inner_right_type inner_right;

   typedef float _inner_left_type;
  _inner_left_type inner_left;

   typedef float _outer_left_type;
  _outer_left_type outer_left;





  typedef boost::shared_ptr< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> const> ConstPtr;

}; // struct LineFollowerStamped_

typedef ::duckietown_msgs::LineFollowerStamped_<std::allocator<void> > LineFollowerStamped;

typedef boost::shared_ptr< ::duckietown_msgs::LineFollowerStamped > LineFollowerStampedPtr;
typedef boost::shared_ptr< ::duckietown_msgs::LineFollowerStamped const> LineFollowerStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator1> & lhs, const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.valid == rhs.valid &&
    lhs.outer_right == rhs.outer_right &&
    lhs.inner_right == rhs.inner_right &&
    lhs.inner_left == rhs.inner_left &&
    lhs.outer_left == rhs.outer_left;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator1> & lhs, const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "296fc5d7868bac377ab0a7300283e5f4";
  }

  static const char* value(const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x296fc5d7868bac37ULL;
  static const uint64_t static_value2 = 0x7ab0a7300283e5f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/LineFollowerStamped";
  }

  static const char* value(const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool valid  # True iff the ADC reading was valid\n"
"# All of the following values are normalized line brightness, between 0 and 1.\n"
"# Specifically, an ADC voltage of 0 is mapped to 0, and 3.3V is mapped to 1.0.\n"
"float32 outer_right\n"
"float32 inner_right\n"
"float32 inner_left\n"
"float32 outer_left\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.valid);
      stream.next(m.outer_right);
      stream.next(m.inner_right);
      stream.next(m.inner_left);
      stream.next(m.outer_left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineFollowerStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::LineFollowerStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "outer_right: ";
    Printer<float>::stream(s, indent + "  ", v.outer_right);
    s << indent << "inner_right: ";
    Printer<float>::stream(s, indent + "  ", v.inner_right);
    s << indent << "inner_left: ";
    Printer<float>::stream(s, indent + "  ", v.inner_left);
    s << indent << "outer_left: ";
    Printer<float>::stream(s, indent + "  ", v.outer_left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_LINEFOLLOWERSTAMPED_H
