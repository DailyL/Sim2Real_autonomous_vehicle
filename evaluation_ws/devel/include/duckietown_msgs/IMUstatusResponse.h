// Generated by gencpp from file duckietown_msgs/IMUstatusResponse.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_IMUSTATUSRESPONSE_H
#define DUCKIETOWN_MSGS_MESSAGE_IMUSTATUSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duckietown_msgs
{
template <class ContainerAllocator>
struct IMUstatusResponse_
{
  typedef IMUstatusResponse_<ContainerAllocator> Type;

  IMUstatusResponse_()
    : acceleration_x(0.0)
    , acceleration_y(0.0)
    , acceleration_z(0.0)
    , timestamp_acceleration()
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , timestamp_gyro()
    , magentic_field_x(0.0)
    , magentic_field_y(0.0)
    , magentic_field_z(0.0)
    , timestamp_magnetic_field()
    , temperature(0.0)  {
    }
  IMUstatusResponse_(const ContainerAllocator& _alloc)
    : acceleration_x(0.0)
    , acceleration_y(0.0)
    , acceleration_z(0.0)
    , timestamp_acceleration(_alloc)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , timestamp_gyro(_alloc)
    , magentic_field_x(0.0)
    , magentic_field_y(0.0)
    , magentic_field_z(0.0)
    , timestamp_magnetic_field(_alloc)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef float _acceleration_x_type;
  _acceleration_x_type acceleration_x;

   typedef float _acceleration_y_type;
  _acceleration_y_type acceleration_y;

   typedef float _acceleration_z_type;
  _acceleration_z_type acceleration_z;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _timestamp_acceleration_type;
  _timestamp_acceleration_type timestamp_acceleration;

   typedef float _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef float _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef float _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _timestamp_gyro_type;
  _timestamp_gyro_type timestamp_gyro;

   typedef float _magentic_field_x_type;
  _magentic_field_x_type magentic_field_x;

   typedef float _magentic_field_y_type;
  _magentic_field_y_type magentic_field_y;

   typedef float _magentic_field_z_type;
  _magentic_field_z_type magentic_field_z;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _timestamp_magnetic_field_type;
  _timestamp_magnetic_field_type timestamp_magnetic_field;

   typedef float _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct IMUstatusResponse_

typedef ::duckietown_msgs::IMUstatusResponse_<std::allocator<void> > IMUstatusResponse;

typedef boost::shared_ptr< ::duckietown_msgs::IMUstatusResponse > IMUstatusResponsePtr;
typedef boost::shared_ptr< ::duckietown_msgs::IMUstatusResponse const> IMUstatusResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator1> & lhs, const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator2> & rhs)
{
  return lhs.acceleration_x == rhs.acceleration_x &&
    lhs.acceleration_y == rhs.acceleration_y &&
    lhs.acceleration_z == rhs.acceleration_z &&
    lhs.timestamp_acceleration == rhs.timestamp_acceleration &&
    lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.timestamp_gyro == rhs.timestamp_gyro &&
    lhs.magentic_field_x == rhs.magentic_field_x &&
    lhs.magentic_field_y == rhs.magentic_field_y &&
    lhs.magentic_field_z == rhs.magentic_field_z &&
    lhs.timestamp_magnetic_field == rhs.timestamp_magnetic_field &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator1> & lhs, const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9684a2de93e62838d97f3820fbe82aee";
  }

  static const char* value(const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9684a2de93e62838ULL;
  static const uint64_t static_value2 = 0xd97f3820fbe82aeeULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/IMUstatusResponse";
  }

  static const char* value(const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 acceleration_x\n"
"float32 acceleration_y\n"
"float32 acceleration_z\n"
"string timestamp_acceleration\n"
"float32 gyro_x\n"
"float32 gyro_y\n"
"float32 gyro_z\n"
"string timestamp_gyro\n"
"float32 magentic_field_x\n"
"float32 magentic_field_y\n"
"float32 magentic_field_z\n"
"string timestamp_magnetic_field\n"
"float32 temperature\n"
"\n"
;
  }

  static const char* value(const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acceleration_x);
      stream.next(m.acceleration_y);
      stream.next(m.acceleration_z);
      stream.next(m.timestamp_acceleration);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.timestamp_gyro);
      stream.next(m.magentic_field_x);
      stream.next(m.magentic_field_y);
      stream.next(m.magentic_field_z);
      stream.next(m.timestamp_magnetic_field);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMUstatusResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::IMUstatusResponse_<ContainerAllocator>& v)
  {
    s << indent << "acceleration_x: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_x);
    s << indent << "acceleration_y: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_y);
    s << indent << "acceleration_z: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_z);
    s << indent << "timestamp_acceleration: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.timestamp_acceleration);
    s << indent << "gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "timestamp_gyro: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.timestamp_gyro);
    s << indent << "magentic_field_x: ";
    Printer<float>::stream(s, indent + "  ", v.magentic_field_x);
    s << indent << "magentic_field_y: ";
    Printer<float>::stream(s, indent + "  ", v.magentic_field_y);
    s << indent << "magentic_field_z: ";
    Printer<float>::stream(s, indent + "  ", v.magentic_field_z);
    s << indent << "timestamp_magnetic_field: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.timestamp_magnetic_field);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_IMUSTATUSRESPONSE_H
