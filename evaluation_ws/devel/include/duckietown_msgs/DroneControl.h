// Generated by gencpp from file duckietown_msgs/DroneControl.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_DRONECONTROL_H
#define DUCKIETOWN_MSGS_MESSAGE_DRONECONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duckietown_msgs
{
template <class ContainerAllocator>
struct DroneControl_
{
  typedef DroneControl_<ContainerAllocator> Type;

  DroneControl_()
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , throttle(0.0)  {
    }
  DroneControl_(const ContainerAllocator& _alloc)
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , throttle(0.0)  {
  (void)_alloc;
    }



   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _throttle_type;
  _throttle_type throttle;





  typedef boost::shared_ptr< ::duckietown_msgs::DroneControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::DroneControl_<ContainerAllocator> const> ConstPtr;

}; // struct DroneControl_

typedef ::duckietown_msgs::DroneControl_<std::allocator<void> > DroneControl;

typedef boost::shared_ptr< ::duckietown_msgs::DroneControl > DroneControlPtr;
typedef boost::shared_ptr< ::duckietown_msgs::DroneControl const> DroneControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::DroneControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::DroneControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::DroneControl_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DroneControl_<ContainerAllocator2> & rhs)
{
  return lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.throttle == rhs.throttle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::DroneControl_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DroneControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DroneControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DroneControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DroneControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DroneControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DroneControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DroneControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::DroneControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b386c6e2e9626467134582335c7f632f";
  }

  static const char* value(const ::duckietown_msgs::DroneControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb386c6e2e9626467ULL;
  static const uint64_t static_value2 = 0x134582335c7f632fULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::DroneControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/DroneControl";
  }

  static const char* value(const ::duckietown_msgs::DroneControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::DroneControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Roll Pitch Yaw(rate) Throttle Commands, simulating output from\n"
"#remote control. Values range from 1000 to 2000\n"
"#which corespond to values from 0% to 100%\n"
"\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"float32 throttle\n"
;
  }

  static const char* value(const ::duckietown_msgs::DroneControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::DroneControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.throttle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DroneControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::DroneControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::DroneControl_<ContainerAllocator>& v)
  {
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_DRONECONTROL_H
