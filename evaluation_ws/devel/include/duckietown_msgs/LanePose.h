// Generated by gencpp from file duckietown_msgs/LanePose.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_LANEPOSE_H
#define DUCKIETOWN_MSGS_MESSAGE_LANEPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct LanePose_
{
  typedef LanePose_<ContainerAllocator> Type;

  LanePose_()
    : header()
    , d(0.0)
    , d_ref(0.0)
    , phi(0.0)
    , phi_ref(0.0)
    , d_phi_covariance()
    , curvature(0.0)
    , curvature_ref(0.0)
    , v_ref(0.0)
    , status(0)
    , in_lane(false)  {
      d_phi_covariance.assign(0.0);
  }
  LanePose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , d(0.0)
    , d_ref(0.0)
    , phi(0.0)
    , phi_ref(0.0)
    , d_phi_covariance()
    , curvature(0.0)
    , curvature_ref(0.0)
    , v_ref(0.0)
    , status(0)
    , in_lane(false)  {
  (void)_alloc;
      d_phi_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _d_type;
  _d_type d;

   typedef float _d_ref_type;
  _d_ref_type d_ref;

   typedef float _phi_type;
  _phi_type phi;

   typedef float _phi_ref_type;
  _phi_ref_type phi_ref;

   typedef boost::array<float, 4>  _d_phi_covariance_type;
  _d_phi_covariance_type d_phi_covariance;

   typedef float _curvature_type;
  _curvature_type curvature;

   typedef float _curvature_ref_type;
  _curvature_ref_type curvature_ref;

   typedef float _v_ref_type;
  _v_ref_type v_ref;

   typedef int32_t _status_type;
  _status_type status;

   typedef uint8_t _in_lane_type;
  _in_lane_type in_lane;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif

  enum {
    NORMAL = 0,
    ERROR = 1,
  };


  typedef boost::shared_ptr< ::duckietown_msgs::LanePose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::LanePose_<ContainerAllocator> const> ConstPtr;

}; // struct LanePose_

typedef ::duckietown_msgs::LanePose_<std::allocator<void> > LanePose;

typedef boost::shared_ptr< ::duckietown_msgs::LanePose > LanePosePtr;
typedef boost::shared_ptr< ::duckietown_msgs::LanePose const> LanePoseConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::LanePose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::LanePose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::LanePose_<ContainerAllocator1> & lhs, const ::duckietown_msgs::LanePose_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.d == rhs.d &&
    lhs.d_ref == rhs.d_ref &&
    lhs.phi == rhs.phi &&
    lhs.phi_ref == rhs.phi_ref &&
    lhs.d_phi_covariance == rhs.d_phi_covariance &&
    lhs.curvature == rhs.curvature &&
    lhs.curvature_ref == rhs.curvature_ref &&
    lhs.v_ref == rhs.v_ref &&
    lhs.status == rhs.status &&
    lhs.in_lane == rhs.in_lane;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::LanePose_<ContainerAllocator1> & lhs, const ::duckietown_msgs::LanePose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::LanePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::LanePose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::LanePose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::LanePose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::LanePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::LanePose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::LanePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "382fe0e0d5dea7350bfa93535592e68a";
  }

  static const char* value(const ::duckietown_msgs::LanePose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x382fe0e0d5dea735ULL;
  static const uint64_t static_value2 = 0x0bfa93535592e68aULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::LanePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/LanePose";
  }

  static const char* value(const ::duckietown_msgs::LanePose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::LanePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 d   #lateral offset\n"
"float32 d_ref #lateral offset reference\n"
"float32 phi #heading error\n"
"float32 phi_ref #heading error reference\n"
"float32[4] d_phi_covariance\n"
"float32 curvature\n"
"float32 curvature_ref # Refernece Curvature\n"
"float32 v_ref # Referenece Velocity\n"
"int32 status #Status of duckietbot 0 if normal, 1 if error is encountered\n"
"bool in_lane #Status of duckietbot in lane\n"
"\n"
"#Enum for status\n"
"int32 NORMAL=0\n"
"int32 ERROR=1\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::duckietown_msgs::LanePose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::LanePose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.d);
      stream.next(m.d_ref);
      stream.next(m.phi);
      stream.next(m.phi_ref);
      stream.next(m.d_phi_covariance);
      stream.next(m.curvature);
      stream.next(m.curvature_ref);
      stream.next(m.v_ref);
      stream.next(m.status);
      stream.next(m.in_lane);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LanePose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::LanePose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::LanePose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "d: ";
    Printer<float>::stream(s, indent + "  ", v.d);
    s << indent << "d_ref: ";
    Printer<float>::stream(s, indent + "  ", v.d_ref);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
    s << indent << "phi_ref: ";
    Printer<float>::stream(s, indent + "  ", v.phi_ref);
    s << indent << "d_phi_covariance[]" << std::endl;
    for (size_t i = 0; i < v.d_phi_covariance.size(); ++i)
    {
      s << indent << "  d_phi_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.d_phi_covariance[i]);
    }
    s << indent << "curvature: ";
    Printer<float>::stream(s, indent + "  ", v.curvature);
    s << indent << "curvature_ref: ";
    Printer<float>::stream(s, indent + "  ", v.curvature_ref);
    s << indent << "v_ref: ";
    Printer<float>::stream(s, indent + "  ", v.v_ref);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "in_lane: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_lane);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_LANEPOSE_H
