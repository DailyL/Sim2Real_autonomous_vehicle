# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/SensorsStatusRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorsStatusRequest(genpy.Message):
  _md5sum = "001fde3cab9e313a150416ff09c08ee4"
  _type = "duckietown_msgs/SensorsStatusRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool state
"""
  __slots__ = ['state']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorsStatusRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = False
    else:
      self.state = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.state
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.state,) = _get_struct_B().unpack(str[start:end])
      self.state = bool(self.state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.state
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.state,) = _get_struct_B().unpack(str[start:end])
      self.state = bool(self.state)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/SensorsStatusResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorsStatusResponse(genpy.Message):
  _md5sum = "b3c1ff78cc992d6d1e8b220245aad6f6"
  _type = "duckietown_msgs/SensorsStatusResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool state_front_bumper
bool state_camera
bool state_imu
bool state_tof_fl
bool state_tof_fm
bool state_tof_fr
bool state_tof_sl
bool state_tof_sr
bool state_tof_bl
bool state_tof_bm
bool state_tof_br
bool state_lf_outer_left
bool state_lf_outer_right
bool state_lf_inner_left
bool state_lf_inner_right
bool state_encoder_and_motor

"""
  __slots__ = ['state_front_bumper','state_camera','state_imu','state_tof_fl','state_tof_fm','state_tof_fr','state_tof_sl','state_tof_sr','state_tof_bl','state_tof_bm','state_tof_br','state_lf_outer_left','state_lf_outer_right','state_lf_inner_left','state_lf_inner_right','state_encoder_and_motor']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state_front_bumper,state_camera,state_imu,state_tof_fl,state_tof_fm,state_tof_fr,state_tof_sl,state_tof_sr,state_tof_bl,state_tof_bm,state_tof_br,state_lf_outer_left,state_lf_outer_right,state_lf_inner_left,state_lf_inner_right,state_encoder_and_motor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorsStatusResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state_front_bumper is None:
        self.state_front_bumper = False
      if self.state_camera is None:
        self.state_camera = False
      if self.state_imu is None:
        self.state_imu = False
      if self.state_tof_fl is None:
        self.state_tof_fl = False
      if self.state_tof_fm is None:
        self.state_tof_fm = False
      if self.state_tof_fr is None:
        self.state_tof_fr = False
      if self.state_tof_sl is None:
        self.state_tof_sl = False
      if self.state_tof_sr is None:
        self.state_tof_sr = False
      if self.state_tof_bl is None:
        self.state_tof_bl = False
      if self.state_tof_bm is None:
        self.state_tof_bm = False
      if self.state_tof_br is None:
        self.state_tof_br = False
      if self.state_lf_outer_left is None:
        self.state_lf_outer_left = False
      if self.state_lf_outer_right is None:
        self.state_lf_outer_right = False
      if self.state_lf_inner_left is None:
        self.state_lf_inner_left = False
      if self.state_lf_inner_right is None:
        self.state_lf_inner_right = False
      if self.state_encoder_and_motor is None:
        self.state_encoder_and_motor = False
    else:
      self.state_front_bumper = False
      self.state_camera = False
      self.state_imu = False
      self.state_tof_fl = False
      self.state_tof_fm = False
      self.state_tof_fr = False
      self.state_tof_sl = False
      self.state_tof_sr = False
      self.state_tof_bl = False
      self.state_tof_bm = False
      self.state_tof_br = False
      self.state_lf_outer_left = False
      self.state_lf_outer_right = False
      self.state_lf_inner_left = False
      self.state_lf_inner_right = False
      self.state_encoder_and_motor = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16B().pack(_x.state_front_bumper, _x.state_camera, _x.state_imu, _x.state_tof_fl, _x.state_tof_fm, _x.state_tof_fr, _x.state_tof_sl, _x.state_tof_sr, _x.state_tof_bl, _x.state_tof_bm, _x.state_tof_br, _x.state_lf_outer_left, _x.state_lf_outer_right, _x.state_lf_inner_left, _x.state_lf_inner_right, _x.state_encoder_and_motor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.state_front_bumper, _x.state_camera, _x.state_imu, _x.state_tof_fl, _x.state_tof_fm, _x.state_tof_fr, _x.state_tof_sl, _x.state_tof_sr, _x.state_tof_bl, _x.state_tof_bm, _x.state_tof_br, _x.state_lf_outer_left, _x.state_lf_outer_right, _x.state_lf_inner_left, _x.state_lf_inner_right, _x.state_encoder_and_motor,) = _get_struct_16B().unpack(str[start:end])
      self.state_front_bumper = bool(self.state_front_bumper)
      self.state_camera = bool(self.state_camera)
      self.state_imu = bool(self.state_imu)
      self.state_tof_fl = bool(self.state_tof_fl)
      self.state_tof_fm = bool(self.state_tof_fm)
      self.state_tof_fr = bool(self.state_tof_fr)
      self.state_tof_sl = bool(self.state_tof_sl)
      self.state_tof_sr = bool(self.state_tof_sr)
      self.state_tof_bl = bool(self.state_tof_bl)
      self.state_tof_bm = bool(self.state_tof_bm)
      self.state_tof_br = bool(self.state_tof_br)
      self.state_lf_outer_left = bool(self.state_lf_outer_left)
      self.state_lf_outer_right = bool(self.state_lf_outer_right)
      self.state_lf_inner_left = bool(self.state_lf_inner_left)
      self.state_lf_inner_right = bool(self.state_lf_inner_right)
      self.state_encoder_and_motor = bool(self.state_encoder_and_motor)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16B().pack(_x.state_front_bumper, _x.state_camera, _x.state_imu, _x.state_tof_fl, _x.state_tof_fm, _x.state_tof_fr, _x.state_tof_sl, _x.state_tof_sr, _x.state_tof_bl, _x.state_tof_bm, _x.state_tof_br, _x.state_lf_outer_left, _x.state_lf_outer_right, _x.state_lf_inner_left, _x.state_lf_inner_right, _x.state_encoder_and_motor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.state_front_bumper, _x.state_camera, _x.state_imu, _x.state_tof_fl, _x.state_tof_fm, _x.state_tof_fr, _x.state_tof_sl, _x.state_tof_sr, _x.state_tof_bl, _x.state_tof_bm, _x.state_tof_br, _x.state_lf_outer_left, _x.state_lf_outer_right, _x.state_lf_inner_left, _x.state_lf_inner_right, _x.state_encoder_and_motor,) = _get_struct_16B().unpack(str[start:end])
      self.state_front_bumper = bool(self.state_front_bumper)
      self.state_camera = bool(self.state_camera)
      self.state_imu = bool(self.state_imu)
      self.state_tof_fl = bool(self.state_tof_fl)
      self.state_tof_fm = bool(self.state_tof_fm)
      self.state_tof_fr = bool(self.state_tof_fr)
      self.state_tof_sl = bool(self.state_tof_sl)
      self.state_tof_sr = bool(self.state_tof_sr)
      self.state_tof_bl = bool(self.state_tof_bl)
      self.state_tof_bm = bool(self.state_tof_bm)
      self.state_tof_br = bool(self.state_tof_br)
      self.state_lf_outer_left = bool(self.state_lf_outer_left)
      self.state_lf_outer_right = bool(self.state_lf_outer_right)
      self.state_lf_inner_left = bool(self.state_lf_inner_left)
      self.state_lf_inner_right = bool(self.state_lf_inner_right)
      self.state_encoder_and_motor = bool(self.state_encoder_and_motor)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
class SensorsStatus(object):
  _type          = 'duckietown_msgs/SensorsStatus'
  _md5sum = 'd8dd1fcbd833d76004def4493c2acff3'
  _request_class  = SensorsStatusRequest
  _response_class = SensorsStatusResponse
