# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/IMUstatusRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IMUstatusRequest(genpy.Message):
  _md5sum = "92d95aecfa07c3669b7ca7c238562a18"
  _type = "duckietown_msgs/IMUstatusRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string sensor_position
"""
  __slots__ = ['sensor_position']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensor_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUstatusRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensor_position is None:
        self.sensor_position = ''
    else:
      self.sensor_position = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.sensor_position
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sensor_position = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sensor_position = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.sensor_position
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sensor_position = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sensor_position = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/IMUstatusResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IMUstatusResponse(genpy.Message):
  _md5sum = "9684a2de93e62838d97f3820fbe82aee"
  _type = "duckietown_msgs/IMUstatusResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 acceleration_x
float32 acceleration_y
float32 acceleration_z
string timestamp_acceleration
float32 gyro_x
float32 gyro_y
float32 gyro_z
string timestamp_gyro
float32 magentic_field_x
float32 magentic_field_y
float32 magentic_field_z
string timestamp_magnetic_field
float32 temperature

"""
  __slots__ = ['acceleration_x','acceleration_y','acceleration_z','timestamp_acceleration','gyro_x','gyro_y','gyro_z','timestamp_gyro','magentic_field_x','magentic_field_y','magentic_field_z','timestamp_magnetic_field','temperature']
  _slot_types = ['float32','float32','float32','string','float32','float32','float32','string','float32','float32','float32','string','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acceleration_x,acceleration_y,acceleration_z,timestamp_acceleration,gyro_x,gyro_y,gyro_z,timestamp_gyro,magentic_field_x,magentic_field_y,magentic_field_z,timestamp_magnetic_field,temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUstatusResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.acceleration_x is None:
        self.acceleration_x = 0.
      if self.acceleration_y is None:
        self.acceleration_y = 0.
      if self.acceleration_z is None:
        self.acceleration_z = 0.
      if self.timestamp_acceleration is None:
        self.timestamp_acceleration = ''
      if self.gyro_x is None:
        self.gyro_x = 0.
      if self.gyro_y is None:
        self.gyro_y = 0.
      if self.gyro_z is None:
        self.gyro_z = 0.
      if self.timestamp_gyro is None:
        self.timestamp_gyro = ''
      if self.magentic_field_x is None:
        self.magentic_field_x = 0.
      if self.magentic_field_y is None:
        self.magentic_field_y = 0.
      if self.magentic_field_z is None:
        self.magentic_field_z = 0.
      if self.timestamp_magnetic_field is None:
        self.timestamp_magnetic_field = ''
      if self.temperature is None:
        self.temperature = 0.
    else:
      self.acceleration_x = 0.
      self.acceleration_y = 0.
      self.acceleration_z = 0.
      self.timestamp_acceleration = ''
      self.gyro_x = 0.
      self.gyro_y = 0.
      self.gyro_z = 0.
      self.timestamp_gyro = ''
      self.magentic_field_x = 0.
      self.magentic_field_y = 0.
      self.magentic_field_z = 0.
      self.timestamp_magnetic_field = ''
      self.temperature = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.acceleration_x, _x.acceleration_y, _x.acceleration_z))
      _x = self.timestamp_acceleration
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.gyro_x, _x.gyro_y, _x.gyro_z))
      _x = self.timestamp_gyro
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.magentic_field_x, _x.magentic_field_y, _x.magentic_field_z))
      _x = self.timestamp_magnetic_field
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.temperature
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.acceleration_x, _x.acceleration_y, _x.acceleration_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_acceleration = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_acceleration = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.gyro_x, _x.gyro_y, _x.gyro_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_gyro = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_gyro = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.magentic_field_x, _x.magentic_field_y, _x.magentic_field_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_magnetic_field = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_magnetic_field = str[start:end]
      start = end
      end += 4
      (self.temperature,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.acceleration_x, _x.acceleration_y, _x.acceleration_z))
      _x = self.timestamp_acceleration
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.gyro_x, _x.gyro_y, _x.gyro_z))
      _x = self.timestamp_gyro
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.magentic_field_x, _x.magentic_field_y, _x.magentic_field_z))
      _x = self.timestamp_magnetic_field
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.temperature
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.acceleration_x, _x.acceleration_y, _x.acceleration_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_acceleration = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_acceleration = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.gyro_x, _x.gyro_y, _x.gyro_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_gyro = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_gyro = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.magentic_field_x, _x.magentic_field_y, _x.magentic_field_z,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timestamp_magnetic_field = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timestamp_magnetic_field = str[start:end]
      start = end
      end += 4
      (self.temperature,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
class IMUstatus(object):
  _type          = 'duckietown_msgs/IMUstatus'
  _md5sum = '508fbfdea8b0319f1b2a5826eac9a6e6'
  _request_class  = IMUstatusRequest
  _response_class = IMUstatusResponse
