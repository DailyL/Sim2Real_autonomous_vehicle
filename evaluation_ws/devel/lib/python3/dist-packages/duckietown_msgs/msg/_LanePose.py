# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/LanePose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class LanePose(genpy.Message):
  _md5sum = "382fe0e0d5dea7350bfa93535592e68a"
  _type = "duckietown_msgs/LanePose"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float32 d   #lateral offset
float32 d_ref #lateral offset reference
float32 phi #heading error
float32 phi_ref #heading error reference
float32[4] d_phi_covariance
float32 curvature
float32 curvature_ref # Refernece Curvature
float32 v_ref # Referenece Velocity
int32 status #Status of duckietbot 0 if normal, 1 if error is encountered
bool in_lane #Status of duckietbot in lane

#Enum for status
int32 NORMAL=0
int32 ERROR=1

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  NORMAL = 0
  ERROR = 1

  __slots__ = ['header','d','d_ref','phi','phi_ref','d_phi_covariance','curvature','curvature_ref','v_ref','status','in_lane']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32[4]','float32','float32','float32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,d,d_ref,phi,phi_ref,d_phi_covariance,curvature,curvature_ref,v_ref,status,in_lane

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LanePose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.d is None:
        self.d = 0.
      if self.d_ref is None:
        self.d_ref = 0.
      if self.phi is None:
        self.phi = 0.
      if self.phi_ref is None:
        self.phi_ref = 0.
      if self.d_phi_covariance is None:
        self.d_phi_covariance = [0.] * 4
      if self.curvature is None:
        self.curvature = 0.
      if self.curvature_ref is None:
        self.curvature_ref = 0.
      if self.v_ref is None:
        self.v_ref = 0.
      if self.status is None:
        self.status = 0
      if self.in_lane is None:
        self.in_lane = False
    else:
      self.header = std_msgs.msg.Header()
      self.d = 0.
      self.d_ref = 0.
      self.phi = 0.
      self.phi_ref = 0.
      self.d_phi_covariance = [0.] * 4
      self.curvature = 0.
      self.curvature_ref = 0.
      self.v_ref = 0.
      self.status = 0
      self.in_lane = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.d, _x.d_ref, _x.phi, _x.phi_ref))
      buff.write(_get_struct_4f().pack(*self.d_phi_covariance))
      _x = self
      buff.write(_get_struct_3fiB().pack(_x.curvature, _x.curvature_ref, _x.v_ref, _x.status, _x.in_lane))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.d, _x.d_ref, _x.phi, _x.phi_ref,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.d_phi_covariance = _get_struct_4f().unpack(str[start:end])
      _x = self
      start = end
      end += 17
      (_x.curvature, _x.curvature_ref, _x.v_ref, _x.status, _x.in_lane,) = _get_struct_3fiB().unpack(str[start:end])
      self.in_lane = bool(self.in_lane)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.d, _x.d_ref, _x.phi, _x.phi_ref))
      buff.write(self.d_phi_covariance.tostring())
      _x = self
      buff.write(_get_struct_3fiB().pack(_x.curvature, _x.curvature_ref, _x.v_ref, _x.status, _x.in_lane))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.d, _x.d_ref, _x.phi, _x.phi_ref,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.d_phi_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 17
      (_x.curvature, _x.curvature_ref, _x.v_ref, _x.status, _x.in_lane,) = _get_struct_3fiB().unpack(str[start:end])
      self.in_lane = bool(self.in_lane)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3fiB = None
def _get_struct_3fiB():
    global _struct_3fiB
    if _struct_3fiB is None:
        _struct_3fiB = struct.Struct("<3fiB")
    return _struct_3fiB
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
