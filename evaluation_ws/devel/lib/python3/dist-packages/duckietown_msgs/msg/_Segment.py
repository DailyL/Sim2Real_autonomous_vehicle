# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/Segment.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import duckietown_msgs.msg
import geometry_msgs.msg

class Segment(genpy.Message):
  _md5sum = "63449fcee6301e43c25adab0c5e5d117"
  _type = "duckietown_msgs/Segment"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 WHITE=0
uint8 YELLOW=1	
uint8 RED=2
uint8 color
duckietown_msgs/Vector2D[2] pixels_normalized
duckietown_msgs/Vector2D normal

geometry_msgs/Point[2] points

================================================================================
MSG: duckietown_msgs/Vector2D
float32 x
float32 y

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  WHITE = 0
  YELLOW = 1
  RED = 2

  __slots__ = ['color','pixels_normalized','normal','points']
  _slot_types = ['uint8','duckietown_msgs/Vector2D[2]','duckietown_msgs/Vector2D','geometry_msgs/Point[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       color,pixels_normalized,normal,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Segment, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.color is None:
        self.color = 0
      if self.pixels_normalized is None:
        self.pixels_normalized = [duckietown_msgs.msg.Vector2D() for _ in range(2)]
      if self.normal is None:
        self.normal = duckietown_msgs.msg.Vector2D()
      if self.points is None:
        self.points = [geometry_msgs.msg.Point() for _ in range(2)]
    else:
      self.color = 0
      self.pixels_normalized = [duckietown_msgs.msg.Vector2D() for _ in range(2)]
      self.normal = duckietown_msgs.msg.Vector2D()
      self.points = [geometry_msgs.msg.Point() for _ in range(2)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.color
      buff.write(_get_struct_B().pack(_x))
      if len(self.pixels_normalized) != 2:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (2, len(self.pixels_normalized), 'self.pixels_normalized')))
      for val1 in self.pixels_normalized:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2f().pack(_x.normal.x, _x.normal.y))
      if len(self.points) != 2:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (2, len(self.points), 'self.points')))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pixels_normalized is None:
        self.pixels_normalized = None
      if self.normal is None:
        self.normal = duckietown_msgs.msg.Vector2D()
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 1
      (self.color,) = _get_struct_B().unpack(str[start:end])
      self.pixels_normalized = []
      for i in range(0, 2):
        val1 = duckietown_msgs.msg.Vector2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.pixels_normalized.append(val1)
      _x = self
      start = end
      end += 8
      (_x.normal.x, _x.normal.y,) = _get_struct_2f().unpack(str[start:end])
      self.points = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.color
      buff.write(_get_struct_B().pack(_x))
      if len(self.pixels_normalized) != 2:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (2, len(self.pixels_normalized), 'self.pixels_normalized')))
      for val1 in self.pixels_normalized:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_2f().pack(_x.normal.x, _x.normal.y))
      if len(self.points) != 2:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (2, len(self.points), 'self.points')))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pixels_normalized is None:
        self.pixels_normalized = None
      if self.normal is None:
        self.normal = duckietown_msgs.msg.Vector2D()
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 1
      (self.color,) = _get_struct_B().unpack(str[start:end])
      self.pixels_normalized = []
      for i in range(0, 2):
        val1 = duckietown_msgs.msg.Vector2D()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.pixels_normalized.append(val1)
      _x = self
      start = end
      end += 8
      (_x.normal.x, _x.normal.y,) = _get_struct_2f().unpack(str[start:end])
      self.points = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
