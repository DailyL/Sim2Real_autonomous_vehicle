# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/ObstacleImageDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import duckietown_msgs.msg

class ObstacleImageDetection(genpy.Message):
  _md5sum = "e532bfbd15e6046dab5e4261999811a9"
  _type = "duckietown_msgs/ObstacleImageDetection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """duckietown_msgs/Rect bounding_box
duckietown_msgs/ObstacleType type
================================================================================
MSG: duckietown_msgs/Rect
# all in pixel coordinate
# (x, y, w, h) defines a rectangle
int32 x
int32 y
int32 w
int32 h

================================================================================
MSG: duckietown_msgs/ObstacleType
uint8 DUCKIE=0
uint8 CONE=1
uint8 type"""
  __slots__ = ['bounding_box','type']
  _slot_types = ['duckietown_msgs/Rect','duckietown_msgs/ObstacleType']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bounding_box,type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleImageDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bounding_box is None:
        self.bounding_box = duckietown_msgs.msg.Rect()
      if self.type is None:
        self.type = duckietown_msgs.msg.ObstacleType()
    else:
      self.bounding_box = duckietown_msgs.msg.Rect()
      self.type = duckietown_msgs.msg.ObstacleType()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4iB().pack(_x.bounding_box.x, _x.bounding_box.y, _x.bounding_box.w, _x.bounding_box.h, _x.type.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bounding_box is None:
        self.bounding_box = duckietown_msgs.msg.Rect()
      if self.type is None:
        self.type = duckietown_msgs.msg.ObstacleType()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.bounding_box.x, _x.bounding_box.y, _x.bounding_box.w, _x.bounding_box.h, _x.type.type,) = _get_struct_4iB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4iB().pack(_x.bounding_box.x, _x.bounding_box.y, _x.bounding_box.w, _x.bounding_box.h, _x.type.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bounding_box is None:
        self.bounding_box = duckietown_msgs.msg.Rect()
      if self.type is None:
        self.type = duckietown_msgs.msg.ObstacleType()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.bounding_box.x, _x.bounding_box.y, _x.bounding_box.w, _x.bounding_box.h, _x.type.type,) = _get_struct_4iB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4iB = None
def _get_struct_4iB():
    global _struct_4iB
    if _struct_4iB is None:
        _struct_4iB = struct.Struct("<4iB")
    return _struct_4iB
