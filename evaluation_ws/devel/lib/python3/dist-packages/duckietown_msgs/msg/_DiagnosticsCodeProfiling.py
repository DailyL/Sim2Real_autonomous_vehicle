# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/DiagnosticsCodeProfiling.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DiagnosticsCodeProfiling(genpy.Message):
  _md5sum = "2f919bc6b39855368e96c3df59f3187f"
  _type = "duckietown_msgs/DiagnosticsCodeProfiling"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string node                             # Node publishing this message
string block                            # Name of the profiled code block
float32 frequency                       # Execution frequency of the block
float32 duration                        # Last execution time of the block (in seconds)
string filename                         # Filename in which this block resides
uint16[2] line_nums                     # Start and end line of the block in the file
float32 time_since_last_execution       # Seconds since last execution"""
  __slots__ = ['node','block','frequency','duration','filename','line_nums','time_since_last_execution']
  _slot_types = ['string','string','float32','float32','string','uint16[2]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node,block,frequency,duration,filename,line_nums,time_since_last_execution

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DiagnosticsCodeProfiling, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.node is None:
        self.node = ''
      if self.block is None:
        self.block = ''
      if self.frequency is None:
        self.frequency = 0.
      if self.duration is None:
        self.duration = 0.
      if self.filename is None:
        self.filename = ''
      if self.line_nums is None:
        self.line_nums = [0] * 2
      if self.time_since_last_execution is None:
        self.time_since_last_execution = 0.
    else:
      self.node = ''
      self.block = ''
      self.frequency = 0.
      self.duration = 0.
      self.filename = ''
      self.line_nums = [0] * 2
      self.time_since_last_execution = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.node
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.block
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.frequency, _x.duration))
      _x = self.filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_2H().pack(*self.line_nums))
      _x = self.time_since_last_execution
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.block = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.block = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.frequency, _x.duration,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filename = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.filename = str[start:end]
      start = end
      end += 4
      self.line_nums = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      (self.time_since_last_execution,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.node
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.block
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.frequency, _x.duration))
      _x = self.filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.line_nums.tostring())
      _x = self.time_since_last_execution
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.block = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.block = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.frequency, _x.duration,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filename = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.filename = str[start:end]
      start = end
      end += 4
      self.line_nums = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      (self.time_since_last_execution,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
