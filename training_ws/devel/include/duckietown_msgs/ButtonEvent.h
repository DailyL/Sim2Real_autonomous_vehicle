// Generated by gencpp from file duckietown_msgs/ButtonEvent.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_BUTTONEVENT_H
#define DUCKIETOWN_MSGS_MESSAGE_BUTTONEVENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duckietown_msgs
{
template <class ContainerAllocator>
struct ButtonEvent_
{
  typedef ButtonEvent_<ContainerAllocator> Type;

  ButtonEvent_()
    : event(0)  {
    }
  ButtonEvent_(const ContainerAllocator& _alloc)
    : event(0)  {
  (void)_alloc;
    }



   typedef uint8_t _event_type;
  _event_type event;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EVENT_SINGLE_CLICK)
  #undef EVENT_SINGLE_CLICK
#endif
#if defined(_WIN32) && defined(EVENT_HELD_3SEC)
  #undef EVENT_HELD_3SEC
#endif
#if defined(_WIN32) && defined(EVENT_HELD_10SEC)
  #undef EVENT_HELD_10SEC
#endif

  enum {
    EVENT_SINGLE_CLICK = 0u,
    EVENT_HELD_3SEC = 10u,
    EVENT_HELD_10SEC = 20u,
  };


  typedef boost::shared_ptr< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> const> ConstPtr;

}; // struct ButtonEvent_

typedef ::duckietown_msgs::ButtonEvent_<std::allocator<void> > ButtonEvent;

typedef boost::shared_ptr< ::duckietown_msgs::ButtonEvent > ButtonEventPtr;
typedef boost::shared_ptr< ::duckietown_msgs::ButtonEvent const> ButtonEventConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::ButtonEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::ButtonEvent_<ContainerAllocator1> & lhs, const ::duckietown_msgs::ButtonEvent_<ContainerAllocator2> & rhs)
{
  return lhs.event == rhs.event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::ButtonEvent_<ContainerAllocator1> & lhs, const ::duckietown_msgs::ButtonEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99a2e60dbe7b111394ec13b630081819";
  }

  static const char* value(const ::duckietown_msgs::ButtonEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99a2e60dbe7b1113ULL;
  static const uint64_t static_value2 = 0x94ec13b630081819ULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/ButtonEvent";
  }

  static const char* value(const ::duckietown_msgs::ButtonEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 EVENT_SINGLE_CLICK = 0\n"
"uint8 EVENT_HELD_3SEC = 10\n"
"uint8 EVENT_HELD_10SEC = 20\n"
"\n"
"uint8 event\n"
;
  }

  static const char* value(const ::duckietown_msgs::ButtonEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ButtonEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::ButtonEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::ButtonEvent_<ContainerAllocator>& v)
  {
    s << indent << "event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_BUTTONEVENT_H
