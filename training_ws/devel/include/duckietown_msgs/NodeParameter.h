// Generated by gencpp from file duckietown_msgs/NodeParameter.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_NODEPARAMETER_H
#define DUCKIETOWN_MSGS_MESSAGE_NODEPARAMETER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace duckietown_msgs
{
template <class ContainerAllocator>
struct NodeParameter_
{
  typedef NodeParameter_<ContainerAllocator> Type;

  NodeParameter_()
    : node()
    , name()
    , help()
    , type(0)
    , min_value(0.0)
    , max_value(0.0)
    , editable(false)  {
    }
  NodeParameter_(const ContainerAllocator& _alloc)
    : node(_alloc)
    , name(_alloc)
    , help(_alloc)
    , type(0)
    , min_value(0.0)
    , max_value(0.0)
    , editable(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _node_type;
  _node_type node;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _help_type;
  _help_type help;

   typedef uint8_t _type_type;
  _type_type type;

   typedef float _min_value_type;
  _min_value_type min_value;

   typedef float _max_value_type;
  _max_value_type max_value;

   typedef uint8_t _editable_type;
  _editable_type editable;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PARAM_TYPE_UNKNOWN)
  #undef PARAM_TYPE_UNKNOWN
#endif
#if defined(_WIN32) && defined(PARAM_TYPE_STRING)
  #undef PARAM_TYPE_STRING
#endif
#if defined(_WIN32) && defined(PARAM_TYPE_INT)
  #undef PARAM_TYPE_INT
#endif
#if defined(_WIN32) && defined(PARAM_TYPE_FLOAT)
  #undef PARAM_TYPE_FLOAT
#endif
#if defined(_WIN32) && defined(PARAM_TYPE_BOOL)
  #undef PARAM_TYPE_BOOL
#endif

  enum {
    PARAM_TYPE_UNKNOWN = 0u,
    PARAM_TYPE_STRING = 1u,
    PARAM_TYPE_INT = 2u,
    PARAM_TYPE_FLOAT = 3u,
    PARAM_TYPE_BOOL = 4u,
  };


  typedef boost::shared_ptr< ::duckietown_msgs::NodeParameter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::NodeParameter_<ContainerAllocator> const> ConstPtr;

}; // struct NodeParameter_

typedef ::duckietown_msgs::NodeParameter_<std::allocator<void> > NodeParameter;

typedef boost::shared_ptr< ::duckietown_msgs::NodeParameter > NodeParameterPtr;
typedef boost::shared_ptr< ::duckietown_msgs::NodeParameter const> NodeParameterConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::NodeParameter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::NodeParameter_<ContainerAllocator1> & lhs, const ::duckietown_msgs::NodeParameter_<ContainerAllocator2> & rhs)
{
  return lhs.node == rhs.node &&
    lhs.name == rhs.name &&
    lhs.help == rhs.help &&
    lhs.type == rhs.type &&
    lhs.min_value == rhs.min_value &&
    lhs.max_value == rhs.max_value &&
    lhs.editable == rhs.editable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::NodeParameter_<ContainerAllocator1> & lhs, const ::duckietown_msgs::NodeParameter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::NodeParameter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::NodeParameter_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::NodeParameter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "871c14dc09d7cdeffeca9173f51f84f9";
  }

  static const char* value(const ::duckietown_msgs::NodeParameter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x871c14dc09d7cdefULL;
  static const uint64_t static_value2 = 0xfeca9173f51f84f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/NodeParameter";
  }

  static const char* value(const ::duckietown_msgs::NodeParameter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Parameter type (this has to match duckietown.TopicType)\n"
"uint8 PARAM_TYPE_UNKNOWN = 0\n"
"uint8 PARAM_TYPE_STRING = 1\n"
"uint8 PARAM_TYPE_INT = 2\n"
"uint8 PARAM_TYPE_FLOAT = 3\n"
"uint8 PARAM_TYPE_BOOL = 4\n"
"\n"
"string node         # Name of the node\n"
"string name         # Name of the parameter (fully resolved)\n"
"string help         # Description of the parameter\n"
"uint8 type          # Type of the parameter (see PARAM_TYPE_X above)\n"
"float32 min_value   # Min value (for type INT, UINT, and FLOAT)\n"
"float32 max_value   # Max value (for type INT, UINT, and FLOAT)\n"
"bool editable       # Editable (it means that the node will be notified for changes)\n"
;
  }

  static const char* value(const ::duckietown_msgs::NodeParameter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node);
      stream.next(m.name);
      stream.next(m.help);
      stream.next(m.type);
      stream.next(m.min_value);
      stream.next(m.max_value);
      stream.next(m.editable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeParameter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::NodeParameter_<ContainerAllocator>& v)
  {
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "help: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.help);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "min_value: ";
    Printer<float>::stream(s, indent + "  ", v.min_value);
    s << indent << "max_value: ";
    Printer<float>::stream(s, indent + "  ", v.max_value);
    s << indent << "editable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.editable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_NODEPARAMETER_H
