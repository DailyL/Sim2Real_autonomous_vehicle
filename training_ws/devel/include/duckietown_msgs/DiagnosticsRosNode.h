// Generated by gencpp from file duckietown_msgs/DiagnosticsRosNode.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSNODE_H
#define DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSNODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct DiagnosticsRosNode_
{
  typedef DiagnosticsRosNode_<ContainerAllocator> Type;

  DiagnosticsRosNode_()
    : header()
    , name()
    , help()
    , type(0)
    , health(0)
    , health_reason()
    , health_stamp(0.0)
    , enabled(false)
    , uri()
    , machine()
    , module_type()
    , module_instance()  {
    }
  DiagnosticsRosNode_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , help(_alloc)
    , type(0)
    , health(0)
    , health_reason(_alloc)
    , health_stamp(0.0)
    , enabled(false)
    , uri(_alloc)
    , machine(_alloc)
    , module_type(_alloc)
    , module_instance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _help_type;
  _help_type help;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _health_type;
  _health_type health;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _health_reason_type;
  _health_reason_type health_reason;

   typedef float _health_stamp_type;
  _health_stamp_type health_stamp;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uri_type;
  _uri_type uri;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _machine_type;
  _machine_type machine;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _module_type_type;
  _module_type_type module_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _module_instance_type;
  _module_instance_type module_instance;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NODE_TYPE_GENERIC)
  #undef NODE_TYPE_GENERIC
#endif
#if defined(_WIN32) && defined(NODE_TYPE_DRIVER)
  #undef NODE_TYPE_DRIVER
#endif
#if defined(_WIN32) && defined(NODE_TYPE_PERCEPTION)
  #undef NODE_TYPE_PERCEPTION
#endif
#if defined(_WIN32) && defined(NODE_TYPE_CONTROL)
  #undef NODE_TYPE_CONTROL
#endif
#if defined(_WIN32) && defined(NODE_TYPE_PLANNING)
  #undef NODE_TYPE_PLANNING
#endif
#if defined(_WIN32) && defined(NODE_TYPE_LOCALIZATION)
  #undef NODE_TYPE_LOCALIZATION
#endif
#if defined(_WIN32) && defined(NODE_TYPE_MAPPING)
  #undef NODE_TYPE_MAPPING
#endif
#if defined(_WIN32) && defined(NODE_TYPE_SWARM)
  #undef NODE_TYPE_SWARM
#endif
#if defined(_WIN32) && defined(NODE_TYPE_BEHAVIOR)
  #undef NODE_TYPE_BEHAVIOR
#endif
#if defined(_WIN32) && defined(NODE_TYPE_VISUALIZATION)
  #undef NODE_TYPE_VISUALIZATION
#endif
#if defined(_WIN32) && defined(NODE_TYPE_INFRASTRUCTURE)
  #undef NODE_TYPE_INFRASTRUCTURE
#endif
#if defined(_WIN32) && defined(NODE_TYPE_COMMUNICATION)
  #undef NODE_TYPE_COMMUNICATION
#endif
#if defined(_WIN32) && defined(NODE_TYPE_DIAGNOSTICS)
  #undef NODE_TYPE_DIAGNOSTICS
#endif
#if defined(_WIN32) && defined(NODE_TYPE_DEBUG)
  #undef NODE_TYPE_DEBUG
#endif
#if defined(_WIN32) && defined(NODE_HEALTH_UNKNOWN)
  #undef NODE_HEALTH_UNKNOWN
#endif
#if defined(_WIN32) && defined(NODE_HEALTH_STARTING)
  #undef NODE_HEALTH_STARTING
#endif
#if defined(_WIN32) && defined(NODE_HEALTH_STARTED)
  #undef NODE_HEALTH_STARTED
#endif
#if defined(_WIN32) && defined(NODE_HEALTH_HEALTHY)
  #undef NODE_HEALTH_HEALTHY
#endif
#if defined(_WIN32) && defined(NODE_HEALTH_WARNING)
  #undef NODE_HEALTH_WARNING
#endif
#if defined(_WIN32) && defined(NODE_HEALTH_ERROR)
  #undef NODE_HEALTH_ERROR
#endif
#if defined(_WIN32) && defined(NODE_HEALTH_FATAL)
  #undef NODE_HEALTH_FATAL
#endif

  enum {
    NODE_TYPE_GENERIC = 0u,
    NODE_TYPE_DRIVER = 1u,
    NODE_TYPE_PERCEPTION = 2u,
    NODE_TYPE_CONTROL = 3u,
    NODE_TYPE_PLANNING = 4u,
    NODE_TYPE_LOCALIZATION = 5u,
    NODE_TYPE_MAPPING = 6u,
    NODE_TYPE_SWARM = 7u,
    NODE_TYPE_BEHAVIOR = 8u,
    NODE_TYPE_VISUALIZATION = 9u,
    NODE_TYPE_INFRASTRUCTURE = 10u,
    NODE_TYPE_COMMUNICATION = 11u,
    NODE_TYPE_DIAGNOSTICS = 12u,
    NODE_TYPE_DEBUG = 20u,
    NODE_HEALTH_UNKNOWN = 0u,
    NODE_HEALTH_STARTING = 5u,
    NODE_HEALTH_STARTED = 6u,
    NODE_HEALTH_HEALTHY = 10u,
    NODE_HEALTH_WARNING = 20u,
    NODE_HEALTH_ERROR = 30u,
    NODE_HEALTH_FATAL = 40u,
  };


  typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> const> ConstPtr;

}; // struct DiagnosticsRosNode_

typedef ::duckietown_msgs::DiagnosticsRosNode_<std::allocator<void> > DiagnosticsRosNode;

typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosNode > DiagnosticsRosNodePtr;
typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosNode const> DiagnosticsRosNodeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.help == rhs.help &&
    lhs.type == rhs.type &&
    lhs.health == rhs.health &&
    lhs.health_reason == rhs.health_reason &&
    lhs.health_stamp == rhs.health_stamp &&
    lhs.enabled == rhs.enabled &&
    lhs.uri == rhs.uri &&
    lhs.machine == rhs.machine &&
    lhs.module_type == rhs.module_type &&
    lhs.module_instance == rhs.module_instance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d51c0fa0a1d1899eebe4bf3476ab3439";
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd51c0fa0a1d1899eULL;
  static const uint64_t static_value2 = 0xebe4bf3476ab3439ULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/DiagnosticsRosNode";
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Node type (this has to match duckietown.NodeType)\n"
"uint8 NODE_TYPE_GENERIC = 0\n"
"uint8 NODE_TYPE_DRIVER = 1\n"
"uint8 NODE_TYPE_PERCEPTION = 2\n"
"uint8 NODE_TYPE_CONTROL = 3\n"
"uint8 NODE_TYPE_PLANNING = 4\n"
"uint8 NODE_TYPE_LOCALIZATION = 5\n"
"uint8 NODE_TYPE_MAPPING = 6\n"
"uint8 NODE_TYPE_SWARM = 7\n"
"uint8 NODE_TYPE_BEHAVIOR = 8\n"
"uint8 NODE_TYPE_VISUALIZATION = 9\n"
"uint8 NODE_TYPE_INFRASTRUCTURE = 10\n"
"uint8 NODE_TYPE_COMMUNICATION = 11\n"
"uint8 NODE_TYPE_DIAGNOSTICS = 12\n"
"uint8 NODE_TYPE_DEBUG = 20\n"
"\n"
"# Node health (this has to match duckietown.NodeHealth)\n"
"uint8 NODE_HEALTH_UNKNOWN = 0\n"
"uint8 NODE_HEALTH_STARTING = 5\n"
"uint8 NODE_HEALTH_STARTED = 6\n"
"uint8 NODE_HEALTH_HEALTHY = 10\n"
"uint8 NODE_HEALTH_WARNING = 20\n"
"uint8 NODE_HEALTH_ERROR = 30\n"
"uint8 NODE_HEALTH_FATAL = 40\n"
"\n"
"Header header\n"
"string name             # Node publishing this message\n"
"string help             # Node description\n"
"uint8 type              # Node type (see NODE_TYPE_X above)\n"
"uint8 health            # Node health (see NODE_HEALTH_X above)\n"
"string health_reason    # String describing the reason for this health status (if any)\n"
"float32 health_stamp    # Time when the health status changed into the current\n"
"bool enabled            # Status of the switch\n"
"string uri              # RPC URI of the node\n"
"string machine          # Machine hostname or IP where this node is running\n"
"string module_type      # Module containing this node\n"
"string module_instance  # ID of the instance of the module running this node\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.help);
      stream.next(m.type);
      stream.next(m.health);
      stream.next(m.health_reason);
      stream.next(m.health_stamp);
      stream.next(m.enabled);
      stream.next(m.uri);
      stream.next(m.machine);
      stream.next(m.module_type);
      stream.next(m.module_instance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiagnosticsRosNode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::DiagnosticsRosNode_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "help: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.help);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "health: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.health);
    s << indent << "health_reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.health_reason);
    s << indent << "health_stamp: ";
    Printer<float>::stream(s, indent + "  ", v.health_stamp);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "uri: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uri);
    s << indent << "machine: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.machine);
    s << indent << "module_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.module_type);
    s << indent << "module_instance: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.module_instance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSNODE_H
