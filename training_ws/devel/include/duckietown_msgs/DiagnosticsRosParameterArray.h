// Generated by gencpp from file duckietown_msgs/DiagnosticsRosParameterArray.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSPARAMETERARRAY_H
#define DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSPARAMETERARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <duckietown_msgs/NodeParameter.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct DiagnosticsRosParameterArray_
{
  typedef DiagnosticsRosParameterArray_<ContainerAllocator> Type;

  DiagnosticsRosParameterArray_()
    : header()
    , params()  {
    }
  DiagnosticsRosParameterArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , params(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::duckietown_msgs::NodeParameter_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >> _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> const> ConstPtr;

}; // struct DiagnosticsRosParameterArray_

typedef ::duckietown_msgs::DiagnosticsRosParameterArray_<std::allocator<void> > DiagnosticsRosParameterArray;

typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosParameterArray > DiagnosticsRosParameterArrayPtr;
typedef boost::shared_ptr< ::duckietown_msgs::DiagnosticsRosParameterArray const> DiagnosticsRosParameterArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator1> & lhs, const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cce38c64acfe087a9363ff4d78b53a5";
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cce38c64acfe087ULL;
  static const uint64_t static_value2 = 0xa9363ff4d78b53a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/DiagnosticsRosParameterArray";
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"duckietown_msgs/NodeParameter[] params             # List of parameters\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: duckietown_msgs/NodeParameter\n"
"# Parameter type (this has to match duckietown.TopicType)\n"
"uint8 PARAM_TYPE_UNKNOWN = 0\n"
"uint8 PARAM_TYPE_STRING = 1\n"
"uint8 PARAM_TYPE_INT = 2\n"
"uint8 PARAM_TYPE_FLOAT = 3\n"
"uint8 PARAM_TYPE_BOOL = 4\n"
"\n"
"string node         # Name of the node\n"
"string name         # Name of the parameter (fully resolved)\n"
"string help         # Description of the parameter\n"
"uint8 type          # Type of the parameter (see PARAM_TYPE_X above)\n"
"float32 min_value   # Min value (for type INT, UINT, and FLOAT)\n"
"float32 max_value   # Max value (for type INT, UINT, and FLOAT)\n"
"bool editable       # Editable (it means that the node will be notified for changes)\n"
;
  }

  static const char* value(const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiagnosticsRosParameterArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::DiagnosticsRosParameterArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::duckietown_msgs::NodeParameter_<ContainerAllocator> >::stream(s, indent + "    ", v.params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_DIAGNOSTICSROSPARAMETERARRAY_H
