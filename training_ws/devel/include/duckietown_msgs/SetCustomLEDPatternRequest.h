// Generated by gencpp from file duckietown_msgs/SetCustomLEDPatternRequest.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_SETCUSTOMLEDPATTERNREQUEST_H
#define DUCKIETOWN_MSGS_MESSAGE_SETCUSTOMLEDPATTERNREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <duckietown_msgs/LEDPattern.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct SetCustomLEDPatternRequest_
{
  typedef SetCustomLEDPatternRequest_<ContainerAllocator> Type;

  SetCustomLEDPatternRequest_()
    : pattern()  {
    }
  SetCustomLEDPatternRequest_(const ContainerAllocator& _alloc)
    : pattern(_alloc)  {
  (void)_alloc;
    }



   typedef  ::duckietown_msgs::LEDPattern_<ContainerAllocator>  _pattern_type;
  _pattern_type pattern;





  typedef boost::shared_ptr< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetCustomLEDPatternRequest_

typedef ::duckietown_msgs::SetCustomLEDPatternRequest_<std::allocator<void> > SetCustomLEDPatternRequest;

typedef boost::shared_ptr< ::duckietown_msgs::SetCustomLEDPatternRequest > SetCustomLEDPatternRequestPtr;
typedef boost::shared_ptr< ::duckietown_msgs::SetCustomLEDPatternRequest const> SetCustomLEDPatternRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator1> & lhs, const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pattern == rhs.pattern;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator1> & lhs, const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80c491edc501f8f5b2f80aaecfd31b21";
  }

  static const char* value(const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80c491edc501f8f5ULL;
  static const uint64_t static_value2 = 0xb2f80aaecfd31b21ULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/SetCustomLEDPatternRequest";
  }

  static const char* value(const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/LEDPattern pattern\n"
"\n"
"================================================================================\n"
"MSG: duckietown_msgs/LEDPattern\n"
"Header header\n"
"string[]  color_list\n"
"std_msgs/ColorRGBA[]  rgb_vals\n"
"int8[]    color_mask\n"
"float32   frequency\n"
"int8[]    frequency_mask\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pattern);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCustomLEDPatternRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::SetCustomLEDPatternRequest_<ContainerAllocator>& v)
  {
    s << indent << "pattern: ";
    s << std::endl;
    Printer< ::duckietown_msgs::LEDPattern_<ContainerAllocator> >::stream(s, indent + "  ", v.pattern);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_SETCUSTOMLEDPATTERNREQUEST_H
