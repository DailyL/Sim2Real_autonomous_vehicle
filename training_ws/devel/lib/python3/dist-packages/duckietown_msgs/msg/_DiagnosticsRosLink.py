# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/DiagnosticsRosLink.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DiagnosticsRosLink(genpy.Message):
  _md5sum = "53a9a85eb8565abb4ba439662041c3aa"
  _type = "duckietown_msgs/DiagnosticsRosLink"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Link direction
uint8 LINK_DIRECTION_INBOUND = 0
uint8 LINK_DIRECTION_OUTBOUND = 1

string node         # Node publishing this message
string topic        # Topic transferred over the link
string remote       # Remote end of this link
uint8 direction     # Link direction
bool connected      # Status of the link
string transport    # Type of transport used for this link
uint64 messages     # Number of messages transferred over this link
uint64 dropped      # Number of messages dropped over this link
float32 bytes       # Volume of data transferred over this link
float32 frequency   # Link frequency (Hz)
float32 bandwidth   # Link bandwidth (byte/s)
"""
  # Pseudo-constants
  LINK_DIRECTION_INBOUND = 0
  LINK_DIRECTION_OUTBOUND = 1

  __slots__ = ['node','topic','remote','direction','connected','transport','messages','dropped','bytes','frequency','bandwidth']
  _slot_types = ['string','string','string','uint8','bool','string','uint64','uint64','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node,topic,remote,direction,connected,transport,messages,dropped,bytes,frequency,bandwidth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DiagnosticsRosLink, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.node is None:
        self.node = ''
      if self.topic is None:
        self.topic = ''
      if self.remote is None:
        self.remote = ''
      if self.direction is None:
        self.direction = 0
      if self.connected is None:
        self.connected = False
      if self.transport is None:
        self.transport = ''
      if self.messages is None:
        self.messages = 0
      if self.dropped is None:
        self.dropped = 0
      if self.bytes is None:
        self.bytes = 0.
      if self.frequency is None:
        self.frequency = 0.
      if self.bandwidth is None:
        self.bandwidth = 0.
    else:
      self.node = ''
      self.topic = ''
      self.remote = ''
      self.direction = 0
      self.connected = False
      self.transport = ''
      self.messages = 0
      self.dropped = 0
      self.bytes = 0.
      self.frequency = 0.
      self.bandwidth = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.node
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.remote
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.direction, _x.connected))
      _x = self.transport
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3f().pack(_x.messages, _x.dropped, _x.bytes, _x.frequency, _x.bandwidth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remote = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.remote = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.direction, _x.connected,) = _get_struct_2B().unpack(str[start:end])
      self.connected = bool(self.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.transport = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.transport = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.messages, _x.dropped, _x.bytes, _x.frequency, _x.bandwidth,) = _get_struct_2Q3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.node
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.remote
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.direction, _x.connected))
      _x = self.transport
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3f().pack(_x.messages, _x.dropped, _x.bytes, _x.frequency, _x.bandwidth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.remote = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.remote = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.direction, _x.connected,) = _get_struct_2B().unpack(str[start:end])
      self.connected = bool(self.connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.transport = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.transport = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.messages, _x.dropped, _x.bytes, _x.frequency, _x.bandwidth,) = _get_struct_2Q3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2Q3f = None
def _get_struct_2Q3f():
    global _struct_2Q3f
    if _struct_2Q3f is None:
        _struct_2Q3f = struct.Struct("<2Q3f")
    return _struct_2Q3f
