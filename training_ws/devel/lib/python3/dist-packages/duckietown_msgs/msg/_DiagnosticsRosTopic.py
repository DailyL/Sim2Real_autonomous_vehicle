# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from duckietown_msgs/DiagnosticsRosTopic.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DiagnosticsRosTopic(genpy.Message):
  _md5sum = "c3a6c5501489fa1a1f348c31cffc641a"
  _type = "duckietown_msgs/DiagnosticsRosTopic"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Topic direction (this has to match duckietown.TopicDirection)
uint8 TOPIC_DIRECTION_INBOUND = 0
uint8 TOPIC_DIRECTION_OUTBOUND = 1

# Topic type (this has to match duckietown.TopicType)
uint8 TOPIC_TYPE_GENERIC = 0
uint8 TOPIC_TYPE_DRIVER = 1
uint8 TOPIC_TYPE_PERCEPTION = 2
uint8 TOPIC_TYPE_CONTROL = 3
uint8 TOPIC_TYPE_PLANNING = 4
uint8 TOPIC_TYPE_LOCALIZATION = 5
uint8 TOPIC_TYPE_MAPPING = 6
uint8 TOPIC_TYPE_SWARM = 7
uint8 TOPIC_TYPE_BEHAVIOR = 8
uint8 TOPIC_TYPE_VISUALIZATION = 9
uint8 TOPIC_TYPE_INFRASTRUCTURE = 10
uint8 TOPIC_TYPE_COMMUNICATION = 11
uint8 TOPIC_TYPE_DIAGNOSTICS = 12
uint8 TOPIC_TYPE_DEBUG = 20

string node                     # Node publishing this message
string name                     # Topic object of the diagnostics
string help                     # Topic description
uint8 type                      # Topic type
uint8 direction                 # Topic direction
float32 frequency               # Topic frequency (Hz)
float32 effective_frequency     # Topic (effective) frequency (Hz)
float32 healthy_frequency       # Frequency at which this topic can be considered healthy
float32 bandwidth               # Topic bandwidth (byte/s)
bool enabled                    # Topic switch
"""
  # Pseudo-constants
  TOPIC_DIRECTION_INBOUND = 0
  TOPIC_DIRECTION_OUTBOUND = 1
  TOPIC_TYPE_GENERIC = 0
  TOPIC_TYPE_DRIVER = 1
  TOPIC_TYPE_PERCEPTION = 2
  TOPIC_TYPE_CONTROL = 3
  TOPIC_TYPE_PLANNING = 4
  TOPIC_TYPE_LOCALIZATION = 5
  TOPIC_TYPE_MAPPING = 6
  TOPIC_TYPE_SWARM = 7
  TOPIC_TYPE_BEHAVIOR = 8
  TOPIC_TYPE_VISUALIZATION = 9
  TOPIC_TYPE_INFRASTRUCTURE = 10
  TOPIC_TYPE_COMMUNICATION = 11
  TOPIC_TYPE_DIAGNOSTICS = 12
  TOPIC_TYPE_DEBUG = 20

  __slots__ = ['node','name','help','type','direction','frequency','effective_frequency','healthy_frequency','bandwidth','enabled']
  _slot_types = ['string','string','string','uint8','uint8','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node,name,help,type,direction,frequency,effective_frequency,healthy_frequency,bandwidth,enabled

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DiagnosticsRosTopic, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.node is None:
        self.node = ''
      if self.name is None:
        self.name = ''
      if self.help is None:
        self.help = ''
      if self.type is None:
        self.type = 0
      if self.direction is None:
        self.direction = 0
      if self.frequency is None:
        self.frequency = 0.
      if self.effective_frequency is None:
        self.effective_frequency = 0.
      if self.healthy_frequency is None:
        self.healthy_frequency = 0.
      if self.bandwidth is None:
        self.bandwidth = 0.
      if self.enabled is None:
        self.enabled = False
    else:
      self.node = ''
      self.name = ''
      self.help = ''
      self.type = 0
      self.direction = 0
      self.frequency = 0.
      self.effective_frequency = 0.
      self.healthy_frequency = 0.
      self.bandwidth = 0.
      self.enabled = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.node
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.help
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B4fB().pack(_x.type, _x.direction, _x.frequency, _x.effective_frequency, _x.healthy_frequency, _x.bandwidth, _x.enabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.help = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.help = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.type, _x.direction, _x.frequency, _x.effective_frequency, _x.healthy_frequency, _x.bandwidth, _x.enabled,) = _get_struct_2B4fB().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.node
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.help
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B4fB().pack(_x.type, _x.direction, _x.frequency, _x.effective_frequency, _x.healthy_frequency, _x.bandwidth, _x.enabled))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.help = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.help = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.type, _x.direction, _x.frequency, _x.effective_frequency, _x.healthy_frequency, _x.bandwidth, _x.enabled,) = _get_struct_2B4fB().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B4fB = None
def _get_struct_2B4fB():
    global _struct_2B4fB
    if _struct_2B4fB is None:
        _struct_2B4fB = struct.Struct("<2B4fB")
    return _struct_2B4fB
